import construcciones.*
import planetas.*
import personas.*

describe "Prueba 1" {
  //PLANETAS
  const planeta1 = new Planeta()
  const planeta2 = new Planeta()
  //PERSONAS
  const ramiro = new Persona(edad = 2)
  const milagros = new Persona(edad = 24)
  const paula = new Persona(edad = 52)
  const marcelo = new Persona(edad = 63)
  //MURALLAS
  const muralla1 = new Muralla(longitud = 50)
  const muralla2 = new Muralla(longitud = 24)
  const muralla3 = new Muralla(longitud = 9)
  //MUSEO
  const museo1 = new Museo(superficieCubierta = 30,indiceImportancia = 4)

  method initialize() {
    planeta1.agregarPersona(ramiro)
    planeta1.agregarPersona(milagros)
    planeta1.agregarPersona(paula)
    planeta1.agregarPersona(marcelo)
    planeta1.agregarConstruccion(muralla1)
    planeta1.agregarConstruccion(muralla2)
    planeta1.agregarConstruccion(museo1)
    
    planeta2.agregarPersona(marcelo)
    planeta2.agregarPersona(paula)
    planeta2.agregarConstruccion(muralla3)
  }
  test "Si ramiro gasta 5 monedas y paula gana 3, la delegación diplomática está formada por tres personas y su habitante con mas recursos es Paula" {
    ramiro.gastarMonedas(5)
    paula.ganarMonedas(3)
    
    assert.equals(3,planeta1.delegacionDiplomatica().size())
    assert.equals(paula,planeta1.habitanteConMasRecursos())
  }
  test "El planeta 1 es valioso" {
    assert.that(planeta1.esValioso())
  }
  test "Si marcelo cumple 3 veces años, deja de formar parte de la delegacion diplomatica" {
    assert.that(planeta1.delegacionDiplomatica().contains(marcelo))

    marcelo.cumplirAnios()
    marcelo.cumplirAnios()
    marcelo.cumplirAnios()

    assert.notThat(planeta1.delegacionDiplomatica().contains(marcelo))
  }
  test "El planeta 2 no es valioso" {
    assert.notThat(planeta2.esValioso())
  }
}
describe "Prueba 2" {
  //PLANETAS
  const planeta1 = new Planeta()
  const planeta2 = new Planeta()
  //CONSTRUCTORES
  const bob = new Constructor(edad = 30,region = "rocosa",inteligencia = 7)
  const pedro = new Constructor(edad = 54,region = "llanura",inteligencia = 0)
  const many = new Constructor(edad = 15,region = "costa",inteligencia = 10)
  //PRODUCTORES
  const macho = new Productor(edad = 30)
  method initialize() {
    planeta1.agregarPersona(bob)
    planeta1.agregarPersona(pedro)
    planeta1.agregarPersona(many)
    planeta1.agregarPersona(macho)
  }
  test "Macho es una persona destacada y sus recursos son 20. Si aprende la tecnica riego, sus recursos pasarian a ser 40" {
    assert.that(macho.esDestacada())
    assert.equals(20,macho.recursos())

    macho.aprender("riego")

    assert.equals(40,macho.recursos())
  }
  test "Si macho realiza la tecnica cosecha por un tiempo de 3, pierde una unidad de recurso y queda en 19" {
    macho.realizarTecnica("cosecha",3)

    assert.equals(19,macho.recursos())
  }
  test "Si macho realiza la tecnica cultivo por un tiempo de 5, sus recursos quedan en 35" {
    macho.realizarTecnica("cultivo",5)

    assert.equals(35,macho.recursos())
  }
  test "Si macho trabaja en el planeta 2 un tiempo de 4, sus recursos no se modifican ya que no pertence a ese planeta" {
    macho.trabajarEn_Durante_(planeta2,4)

    assert.equals(20,macho.recursos())
  }
  test "Si macho trabaja en el planeta 2 un tiempo de 2, sus recursos quedan en 26"{
    macho.trabajarEn_Durante_(planeta1,2)

    assert.equals(26,macho.recursos())
  }
  test "Si bob trabaja en el planeta 2 en tiempo 4, sus recursos quedan en 25 y el planeta 2 va tener una muralla de longitud 25" {
    bob.trabajarEn_Durante_(planeta2, 4)

    assert.equals(25,bob.recursos())
    assert.equals(1,planeta2.construcciones().size())
    assert.equals(25,planeta2.construcciones().first().longitud())
  }
  test "Pedro, Bob y Many no son personas destacadas" {
    assert.notThat(pedro.esDestacada())
    assert.notThat(bob.esDestacada())
    assert.notThat(many.esDestacada())
  }
  test "Si pedro trabaja en el planeta 1 en tiempo 3, sus recursos quedan en 25 y el planeta 1 va tener una muralla de longitud 1.5" {
    pedro.trabajarEn_Durante_(planeta1, 3)

    assert.equals(25,pedro.recursos())
    assert.equals(1,planeta1.construcciones().size())
    assert.equals(1.5,planeta1.construcciones().first().longitud())
  }
  test "Si many trabaja en el planeta 1 en tiempo 8, sus recursos quedan en 25 y el planeta 1 va tener un museo con una superficie de 8 y un nivel de 1 " {
    many.trabajarEn_Durante_(planeta1, 8)

    assert.equals(25,many.recursos())
    assert.equals(1,planeta1.construcciones().size())
    assert.equals(8,planeta1.construcciones().first().superficieCubierta())
    assert.equals(1,planeta1.construcciones().first().indiceImportancia())
  }
  test "Si macho realiza la tecnica cultivo, la delegacion diplomatica solo está compuesta por el" {
    macho.realizarTecnica("cultivo",1)
    assert.equals([macho],planeta1.delegacionDiplomatica())
  }
  test "Si bob trabaja en cualquier planeta 5 veces pasaría a formar parte de la delegacion junto con macho" {
    bob.trabajarEn_Durante_(planeta1,1)
    bob.trabajarEn_Durante_(planeta2,1)
    bob.trabajarEn_Durante_(planeta2,1)
    bob.trabajarEn_Durante_(planeta1,1)
    bob.trabajarEn_Durante_(planeta1,1)

    assert.equals([macho,bob],planeta1.delegacionDiplomatica())
  }
}